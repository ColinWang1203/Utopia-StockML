from Utopia_tools import *
P_enable_logging()
color_blue = '#1f77b4'
color_orange = '#ff7f0e'
color_brown = '#A52A2A'
color_green = '#2ca02c'
color_red = '#d62728'
color_purple = '#9467bd'
color_black = '#000000'
ALL_APPLE_ML_DATA=[
[29, 391, 0, 420, -11.6, -40, 40, 42.0]
,[29, 391, 0, 420, -11.6, -40, 40, 42.0]
,[31, 384, 1, 416, -11.6, -40, 40, 32.4]
,[59, 349, 10, 418, -3.6, -90, 90, 30.3]
,[92, 273, 17, 382, 15.5, -57, 57, 28.2]
,[58, 351, 6, 415, -3.6, -96, 96, 27.6]
,[78, 326, 11, 415, -3.6, -96, 96, 27.0]
,[121, 245, 18, 384, 11.2, -39, 39, 22.7]
,[89, 319, 9, 417, -3.6, -96, 96, 22.4]
,[92, 320, 7, 419, -3.6, -90, 90, 22.3]
,[38, 356, 18, 412, -3.6, -90, 90, 22.2]
,[58, 363, 7, 428, 100, -53, 53, 21.0]
,[60, 352, 16, 428, 100, -53, 53, 20.8]
,[11, 427, 0, 438, -10.2, -31, 31, 20.4]
,[103, 267, 11, 381, 15.5, -57, 57, 20.0]
,[49, 360, 20, 429, 100, -53, 53, 19.8]
,[134, 281, 8, 423, -3.6, -90, 90, 19.2]
,[43, 347, 34, 424, 100, -38, 38, 19.1]
,[20, 376, 24, 420, 1.2, -53, 53, 18.8]
,[194, 230, 7, 431, 9.4, -89, 89, 18.5]
,[43, 350, 10, 403, 14.5, -91, 91, 17.9]
,[101, 311, 9, 421, -3.6, -90, 90, 17.5]
,[73, 332, 4, 409, 14.5, -91, 91, 16.4]
,[122, 270, 3, 395, -13.0, -57, 57, 16.1]
,[55, 346, 4, 405, 14.5, -91, 91, 16.0]
,[100, 282, 4, 386, 11.2, -39, 39, 15.6]
,[5, 428, 0, 433, 25.6, -20, 20, 14.4]
,[73, 325, 30, 428, 12.3, -77, 77, 14.4]
,[108, 272, 7, 387, 11.2, -39, 39, 14.0]
,[35, 346, 1, 382, -46.4, -68, 68, 13.4]
,[78, 325, 26, 429, 12.3, -77, 77, 13.1]
,[30, 351, 3, 384, -46.4, -68, 68, 13.0]
,[49, 333, 0, 382, -46.4, -68, 68, 11.1]
,[174, 251, 6, 431, 9.4, -89, 89, 10.1]
,[85, 359, 0, 444, 4.2, -48, 48, 10.0]
,[58, 315, 7, 380, 24.4, -81, 81, 9.8]
,[52, 297, 28, 376, -46.4, -52, 52, 9.7]
,[41, 366, 12, 419, 12.0, -60, 60, 8.8]
,[52, 346, 20, 418, 12.0, -68, 68, 8.5]
,[49, 324, 11, 384, 2.5, -83, 83, 8.0]
,[10, 349, 27, 386, -7.6, -34, 34, 7.0]
,[3, 430, 0, 433, 25.6, -24, 24, 6.9]
,[84, 300, 2, 386, 5.3, -53, 53, 6.9]
,[78, 306, 12, 396, 24.1, -69, 69, 6.3]
,[54, 353, 23, 430, 12.3, -77, 77, 6.3]
,[128, 253, 6, 387, 9.0, -79, 79, 6.0]
,[4, 428, 0, 432, 25.6, -20, 20, 5.5]
,[2, 435, 0, 437, 100, -6, 6, 5.1]
,[109, 280, 2, 391, 16.3, -78, 78, 4.9]
,[64, 319, 1, 384, 5.3, -53, 53, 4.8]
,[150, 232, 4, 386, 9.0, -79, 79, 4.6]
,[42, 362, 3, 407, 13.1, -51, 51, 4.5]
,[8, 426, 0, 434, 3.4, -29, 29, 4.0]
,[30, 384, 1, 415, -15.6, -48, 48, 4.0]
,[58, 295, 20, 373, 21.6, -59, 59, 4.0]
,[136, 254, 2, 392, 16.3, -78, 78, 3.9]
,[97, 284, 6, 387, 100, -41, 41, 3.7]
,[137, 229, 14, 380, 100, -41, 41, 3.6]
,[60, 315, 9, 384, 20.3, -55, 55, 3.5]
,[90, 314, 6, 410, -3.6, -71, 71, 3.5]
,[74, 348, 0, 422, -1.4, -46, 46, 3.4]
,[65, 363, 0, 428, -2.3, -71, 71, 3.3]
,[2, 430, 1, 433, 100, -6, 6, 3.2]
,[106, 320, 0, 426, -2.3, -71, 71, 3.0]
,[59, 308, 14, 381, 21.6, -59, 59, 2.9]
,[53, 297, 17, 367, 25.3, -40, 40, 2.7]
,[17, 406, 3, 426, -10.5, -53, 53, 2.5]
,[56, 309, 8, 373, 24.4, -81, 81, 2.5]
,[114, 319, 0, 433, 12.3, -62, 62, 2.4]
,[68, 296, 2, 366, 39.6, -44, 44, 2.4]
,[82, 305, 0, 387, 1.4, -42, 42, 2.2]
,[61, 314, 17, 392, -24.1, -29, 29, 2.1]
,[16, 412, 4, 432, 24.4, -25, 25, 2.0]
,[49, 313, 16, 378, 24.4, -81, 81, 2.0]
,[33, 325, 25, 383, 5.3, -53, 53, 1.9]
,[101, 262, 19, 382, 21.6, -77, 77, 1.9]
,[67, 304, 9, 380, 24.4, -81, 81, 1.9]
,[87, 265, 25, 377, 1.8, -56, 56, 1.9]
,[53, 327, 6, 386, 2.5, -83, 83, 1.8]
,[46, 327, 13, 386, 20.3, -75, 75, 1.7]
,[43, 346, 12, 401, 100, -86, 86, 1.3]
,[128, 258, 0, 386, 5.3, -53, 53, 1.2]
,[35, 386, 3, 424, 4.9, -18, 18, 1.1]
,[2, 435, 1, 438, 100, -6, 6, 1.1]
,[46, 360, 2, 408, 72.0, -75, 75, 1.0]
,[72, 323, 8, 403, 72.0, -76, 76, 0.9]
,[25, 398, 3, 426, -10.5, -22, 22, 0.8]
,[33, 384, 0, 417, -15.6, -48, 48, 0.8]
,[89, 303, 1, 393, 1.4, -42, 42, 0.8]
,[130, 284, 9, 423, 10.1, -52, 52, 0.8]
,[130, 225, 13, 368, 1.8, -56, 56, 0.5]
,[112, 250, 7, 369, -4.0, -56, 56, 0.5]
,[42, 308, 25, 375, -3.4, -23, 23, 0.4]
,[15, 400, 3, 418, -15.6, -48, 48, 0.3]
,[125, 320, 0, 445, -2.1, -66, 66, 0.2]
,[55, 312, 9, 376, 24.4, -81, 81, 0.1]
,[145, 216, 16, 376, 1.8, -56, 56, 0.1]
,[54, 327, 4, 385, 2.5, -83, 83, 0.0]
,[24, 371, 28, 423, 100, -78, 78, -0.2]
,[49, 309, 5, 363, -5.1, -40, 40, -0.2]
,[18, 409, 0, 427, -1.5, -37, 37, -0.3]
,[66, 320, 4, 390, 100, -52, 52, -0.3]
,[140, 214, 22, 376, 1.8, -56, 56, -0.3]
,[10, 431, 0, 441, 19.8, -44, 44, -0.4]
,[46, 323, 35, 404, 14.6, -62, 62, -0.5]
,[37, 329, 31, 396, 24.1, -80, 80, -0.6]
,[42, 355, 13, 410, -5.1, -29, 29, -0.7]
,[54, 297, 14, 365, -19.9, -54, 54, -0.8]
,[126, 285, 4, 415, 10.1, -52, 52, -0.8]
,[2, 414, 15, 431, -6.8, 2, -2, -0.9]
,[6, 431, 0, 437, -0.8, -34, 34, -0.9]
,[125, 289, 6, 419, 10.1, -52, 52, -0.9]
,[69, 326, 10, 405, 13.3, -62, 62, -1.3]
,[149, 243, 0, 392, 4.3, -51, 51, -1.4]
,[23, 403, 1, 427, -4.4, -6, 6, -1.5]
,[52, 334, 22, 408, 13.3, -62, 62, -1.5]
,[55, 307, 8, 370, -5.1, -40, 40, -1.5]
,[41, 314, 31, 386, 20.3, -75, 75, -1.6]
,[71, 327, 4, 402, 72.0, -75, 75, -1.6]
,[140, 241, 4, 385, 28.1, -59, 59, -1.7]
,[91, 298, 1, 390, -37.6, -77, 77, -1.8]
,[52, 309, 16, 377, 11.8, -53, 53, -1.9]
,[60, 339, 3, 402, 72.0, -75, 75, -1.9]
,[18, 400, 11, 429, 100, -53, 53, -2.0]
,[44, 377, 3, 424, 5.0, -37, 37, -2.0]
,[12, 422, 0, 434, 9.3, -9, 9, -2.2]
,[99, 275, 10, 384, 83.3, -59, 59, -2.2]
,[147, 245, 2, 394, 4.3, -51, 51, -2.3]
,[50, 320, 10, 380, 11.8, -53, 53, -2.3]
,[25, 381, 15, 421, 100, -78, 78, -2.4]
,[55, 366, 0, 421, -2.1, -49, 49, -2.4]
,[174, 253, 9, 436, -2.2, -51, 51, -2.4]
,[101, 287, 6, 394, 9.0, -79, 79, -2.4]
,[174, 217, 1, 392, 30.3, -74, 74, -3.1]
,[57, 306, 5, 368, 13.4, -70, 70, -3.1]
,[47, 386, 0, 433, 12.3, -62, 62, -3.2]
,[96, 297, 5, 398, -36.2, -55, 55, -3.2]
,[158, 270, 7, 435, -3.6, -45, 45, -3.4]
,[21, 351, 10, 382, 34.5, -31, 31, -3.4]
,[73, 310, 18, 401, 16.0, -43, 43, -3.8]
,[2, 431, 2, 435, -6.8, 2, -2, -4.2]
,[118, 315, 0, 433, -6.7, -63, 63, -4.3]
,[98, 291, 3, 392, 100, -52, 52, -4.3]
,[68, 310, 11, 389, 33.9, -51, 51, -4.3]
,[53, 316, 4, 373, 26.8, -48, 48, -4.3]
,[67, 305, 13, 385, 11.8, -53, 53, -4.4]
,[101, 285, 18, 404, -8.2, -81, 81, -5.0]
,[62, 302, 2, 366, 13.4, -70, 70, -5.0]
,[58, 315, 12, 385, 11.8, -53, 53, -5.3]
,[122, 282, 2, 406, 9.0, -79, 79, -5.3]
,[36, 380, 5, 421, 2.3, -20, 20, -5.4]
,[166, 246, 3, 415, 9.0, -85, 85, -5.4]
,[45, 323, 6, 374, 26.8, -48, 48, -5.6]
,[49, 304, 10, 363, -19.9, -54, 54, -6.4]
,[50, 321, 16, 387, -20.4, -44, 44, -6.7]
,[72, 315, 8, 395, -8.2, -76, 76, -6.7]
,[77, 295, 16, 388, 21.8, -31, 31, -6.9]
,[166, 288, 0, 454, -6.7, -75, 75, -7.0]
,[43, 324, 6, 373, 26.8, -48, 48, -7.6]
,[40, 332, 31, 403, 100, -86, 86, -11.4]
,[47, 318, 31, 396, -8.2, -76, 76, -12.5]]
ALL=[]
title_index=['top','mid','low','avail','juice','seeds','point']
for i in range(0,len(ALL_APPLE_ML_DATA[0])-1):
    ALL_APPLE_ML_DATA.sort(key=lambda x: x[i], reverse=True)
    ALL.append([[a[i],a[-1]] for a in ALL_APPLE_ML_DATA])

for i in range(0,len(ALL_APPLE_ML_DATA[0])-1):
    plt.figure(dpi=100) # change the dpi before plotting to make it bigger, original 100
    # plot apple
    plt.plot([a[0] for a in ALL[i]], [a[1] for a in ALL[i]]\
            ,label='Apple',color=color_blue, linestyle='-')
    print([a[0] for a in ALL[i]])
    print([a[1] for a in ALL[i]])
    plt.grid()
    plt.tick_params(axis='y', which='both', labelleft='on', labelright='on')
    title = '('+str(i)+')_'+title_index[i]+'_paradise'
    plt.title(title,fontsize=20)
    mngr = plt.get_current_fig_manager()
    geom = mngr.window.geometry()
    x,y,dx,dy = geom.getRect()
    mngr.window.setGeometry(0,0,dx,dy)
    shutil.rmtree('Figs') 
    os.makedirs('Figs')
    plt.savefig('Figs/'+title+'.png')
    plt.show(block=False)
    plt.waitforbuttonpress()
#=========================================================================================================

# def find(s1, s2, paragraphs, cross_line = True):
#     if cross_line:
#         result = re.findall(s1+'(.*?)'+s2, paragraphs, re.DOTALL)
#     else:
#         result = re.findall(s1+'(.*?)'+s2, paragraphs)
#     result = list(set(result))# remove duplicate
#     return result

# url = 'https://www.chinatimes.com/realtimenews/260410?page=2&chdtv'
# response = requests.get(url)
# soup = BeautifulSoup(response.text, 'html.parser')
# paragraphs = P_list2str(soup)
# P_printt(paragraphs)
# print(find('<p class="intro">', '</p>', paragraphs))

#==========================================================================================================
# Database_squeeze_name = 'DB_Avalon.sqlite'
# sql_connection_Database_squeeze_name = sqlite3.connect(Database_squeeze_name)
# sql_cursor_Database_squeeze_name = sql_connection_Database_squeeze_name.cursor()
# Database_juice_name = 'DB_Juice.sqlite'
# sql_connection_Database_juice_name = sqlite3.connect(Database_juice_name)
# sql_cursor_Database_juice_name = sql_connection_Database_juice_name.cursor()
# Database_seeds_name = 'DB_Seeds.sqlite'
# sql_connection_Database_seeds_name = sqlite3.connect(Database_seeds_name)
# sql_cursor_Database_seeds_name = sql_connection_Database_seeds_name.cursor()

# Fig_dir = 'Figs/' 
# Fig_dir_dropbox = '/home/colin/Dropbox/Figs/'

# with open('Processed_date_list.txt') as f:
#     All_apple_date = f.read().splitlines()
# with open('Processed_juice_date_list.txt') as f:
#     All_juice_date = f.read().splitlines()
# with open('Processed_seeds_date_list.txt') as f:
#     All_seeds_date = f.read().splitlines()
# with open('Processed_winds_date_list.txt') as f:
#     All_winds_date = f.read().splitlines()

# Year_juice_date_list = []
# # list of year, max to 2 year
# for count in range(0,6):
#     Year_juice_date = []
#     if count == 0:
#         for i in list(range(0,2)):
#             if i == 0:
#                 Year_juice_date.append(All_juice_date[-12:])
#             else:
#                 Year_juice_date.append(All_juice_date[-(12+(12*i)):-(12*i)])
#         Year_juice_date.reverse()
#     else :  
#         for i in list(range(0,2)):
#             Year_juice_date.append(All_juice_date[-(12+(12*i)+count):-(12*i)-count])
#         # print(Year_juice_date)
#         # P()
#         Year_juice_date.reverse()
#         # print(Year_juice_date)
#         # P()
#     Year_juice_date_list.append(Year_juice_date)
#     print(Year_juice_date_list)
#     if count ==1:
#         P()

# print(Year_juice_date_list)
# P()

# juice_dict = {}
# for dates in Year_juice_date:
#     dates_str = dates[0]+'~'+dates[-1]
#     juice_data_accu = 0
#     for date in dates:
#         sql_cursor_Database_juice_name.execute("SELECT current FROM "+apple_num+" WHERE date LIKE "+date+"")
#         juice_data = sql_cursor_Database_juice_name.fetchall()[0][0]
#         juice_data_accu += juice_data
#     juice_dict[dates_str] = juice_data_accu
